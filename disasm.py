# Autogenerated from insts.td. DO NOT EDIT
def hexify(v):
	if v >= 0:
		return '0x%x' % v
	else:
		return '-0x%x' % -v

def regname(r):
	return '$%i' % r

def signext(size, v):
	if v & (1 << (size - 1)):
		return v - (1 << size)
	return v

def zeroext(size, v):
	return v

def gpr(reg):
	return reg

def disassemble(pc, inst):

	if (inst) >> (0x1a) == 0x0:
		if (inst) & (0x3f) == 0x0:
			#  SLL  
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			shamt = ((inst) >> (0x6)) & (0x1f);
			return((('sll ') + (regname(rd))) + (((', ') + (regname(rt))) + ((', ') + (hexify(shamt)))));
		elif (inst) & (0x3f) == 0x2:
			#  SRL  
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			shamt = ((inst) >> (0x6)) & (0x1f);
			return((('srl ') + (regname(rd))) + (((', ') + (regname(rt))) + ((', ') + (hexify(shamt)))));
		elif (inst) & (0x3f) == 0x3:
			#  SRA  
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			shamt = ((inst) >> (0x6)) & (0x1f);
			return((('sra ') + (regname(rd))) + (((', ') + (regname(rt))) + ((', ') + (hexify(shamt)))));
		elif (inst) & (0x3f) == 0x4:
			#  SLLV  
			rs = ((inst) >> (0x15)) & (0x1f);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('sllv ') + (regname(rd))) + (((', ') + (regname(rt))) + ((', ') + (regname(rs)))));
		elif (inst) & (0x3f) == 0x6:
			#  SRLV  
			rs = ((inst) >> (0x15)) & (0x1f);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('srlv ') + (regname(rd))) + (((', ') + (regname(rt))) + (', $shamt')));
		elif (inst) & (0x3f) == 0x7:
			#  SRAV  
			rs = ((inst) >> (0x15)) & (0x1f);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('srav ') + (regname(rd))) + (((', ') + (regname(rt))) + (', $shamt')));
		elif (inst) & (0x3f) == 0x8:
			#  JR  
			rs = ((inst) >> (0x15)) & (0x1f);
			return(('jr ') + (regname(rs)));
		elif (inst) & (0x3f) == 0x9:
			#  JALR  
			rs = ((inst) >> (0x15)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('jalr ') + (regname(rd))) + ((', ') + (regname(rs))));
		elif (inst) & (0x3f) == 0xc:
			#  SYSCALL  
			code = ((inst) >> (0x6)) & (0xfffff);
			return(('syscall ') + (hexify(code)));
		elif (inst) & (0x3f) == 0xd:
			#  BREAK  
			code = ((inst) >> (0x6)) & (0xfffff);
			return(('break ') + (hexify(code)));
		elif (inst) & (0x3f) == 0x10:
			#  MFHI  
			rd = ((inst) >> (0xb)) & (0x1f);
			return(('mfhi ') + (regname(rd)));
		elif (inst) & (0x3f) == 0x11:
			#  MTHI  
			rd = ((inst) >> (0xb)) & (0x1f);
			return(('mthi ') + (regname(rd)));
		elif (inst) & (0x3f) == 0x12:
			#  MFLO  
			rd = ((inst) >> (0xb)) & (0x1f);
			return(('mflo ') + (regname(rd)));
		elif (inst) & (0x3f) == 0x13:
			#  MTLO  
			rd = ((inst) >> (0xb)) & (0x1f);
			return(('mtlo ') + (regname(rd)));
		elif (inst) & (0x3f) == 0x18:
			#  MULT  
			rs = ((inst) >> (0x15)) & (0x1f);
			rt = ((inst) >> (0x10)) & (0x1f);
			return((('mult ') + (regname(rs))) + ((', ') + (regname(rt))));
		elif (inst) & (0x3f) == 0x19:
			#  MULTU  
			rs = ((inst) >> (0x15)) & (0x1f);
			rt = ((inst) >> (0x10)) & (0x1f);
			return((('multu ') + (regname(rs))) + ((', ') + (regname(rt))));
		elif (inst) & (0x3f) == 0x1a:
			#  DIV  
			rs = ((inst) >> (0x15)) & (0x1f);
			rt = ((inst) >> (0x10)) & (0x1f);
			
			
			
			return((('div ') + (regname(rs))) + ((', ') + (regname(rt))));
		elif (inst) & (0x3f) == 0x1b:
			#  DIVU  
			rs = ((inst) >> (0x15)) & (0x1f);
			rt = ((inst) >> (0x10)) & (0x1f);
			
			
			return((('divu ') + (regname(rs))) + ((', ') + (regname(rt))));
		elif (inst) & (0x3f) == 0x20:
			#  ADD  
			rs = ((inst) >> (0x15)) & (0x1f);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('add ') + (regname(rd))) + (((', ') + (regname(rs))) + ((', ') + (regname(rt)))));
		elif (inst) & (0x3f) == 0x21:
			#  ADDU  
			rs = ((inst) >> (0x15)) & (0x1f);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('addu ') + (regname(rd))) + (((', ') + (regname(rs))) + ((', ') + (regname(rt)))));
		elif (inst) & (0x3f) == 0x22:
			#  SUB  
			rs = ((inst) >> (0x15)) & (0x1f);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('sub ') + (regname(rd))) + (((', ') + (regname(rs))) + ((', ') + (regname(rt)))));
		elif (inst) & (0x3f) == 0x23:
			#  SUBU  
			rs = ((inst) >> (0x15)) & (0x1f);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('subu ') + (regname(rd))) + (((', ') + (regname(rs))) + ((', ') + (regname(rt)))));
		elif (inst) & (0x3f) == 0x24:
			#  AND  
			rs = ((inst) >> (0x15)) & (0x1f);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('and ') + (regname(rd))) + (((', ') + (regname(rs))) + ((', ') + (regname(rt)))));
		elif (inst) & (0x3f) == 0x25:
			#  OR  
			rs = ((inst) >> (0x15)) & (0x1f);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('or ') + (regname(rd))) + (((', ') + (regname(rs))) + ((', ') + (regname(rt)))));
		elif (inst) & (0x3f) == 0x26:
			#  XOR  
			rs = ((inst) >> (0x15)) & (0x1f);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('xor ') + (regname(rd))) + (((', ') + (regname(rs))) + ((', ') + (regname(rt)))));
		elif (inst) & (0x3f) == 0x27:
			#  NOR  
			rs = ((inst) >> (0x15)) & (0x1f);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('nor ') + (regname(rd))) + (((', ') + (regname(rs))) + ((', ') + (regname(rt)))));
		elif (inst) & (0x3f) == 0x2a:
			#  SLT  
			rs = ((inst) >> (0x15)) & (0x1f);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('slt ') + (regname(rd))) + (((', ') + (regname(rs))) + ((', ') + (regname(rt)))));
		elif (inst) & (0x3f) == 0x2b:
			#  SLTU  
			rs = ((inst) >> (0x15)) & (0x1f);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('sltu ') + (regname(rd))) + (((', ') + (regname(rs))) + ((', ') + (regname(rt)))));
		
	elif (inst) >> (0x1a) == 0x1:
		if ((inst) >> (0x10)) & (0x1f) == 0x0:
			#  BLTZanonymous_0  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bltz ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x1:
			#  BGEZanonymous_0  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bgez ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x2:
			#  BLTZanonymous_1  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bltz ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x3:
			#  BGEZanonymous_1  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bgez ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x4:
			#  BLTZanonymous_2  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bltz ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x5:
			#  BGEZanonymous_2  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bgez ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x6:
			#  BLTZanonymous_3  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bltz ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x7:
			#  BGEZanonymous_3  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bgez ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x8:
			#  BLTZanonymous_4  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bltz ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x9:
			#  BGEZanonymous_4  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bgez ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0xa:
			#  BLTZanonymous_5  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bltz ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0xb:
			#  BGEZanonymous_5  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bgez ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0xc:
			#  BLTZanonymous_6  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bltz ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0xd:
			#  BGEZanonymous_6  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bgez ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0xe:
			#  BLTZanonymous_7  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bltz ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0xf:
			#  BGEZanonymous_7  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bgez ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x10:
			#  BLTZALanonymous_0  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bltzal ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x11:
			#  BGEZALanonymous_0  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bgezal ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x12:
			#  BLTZALanonymous_1  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bltzal ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x13:
			#  BGEZALanonymous_1  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bgezal ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x14:
			#  BLTZALanonymous_2  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bltzal ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x15:
			#  BGEZALanonymous_2  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bgezal ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x16:
			#  BLTZALanonymous_3  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bltzal ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x17:
			#  BGEZALanonymous_3  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bgezal ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x18:
			#  BLTZALanonymous_4  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bltzal ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x19:
			#  BGEZALanonymous_4  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bgezal ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x1a:
			#  BLTZALanonymous_5  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bltzal ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x1b:
			#  BGEZALanonymous_5  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bgezal ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x1c:
			#  BLTZALanonymous_6  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bltzal ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x1d:
			#  BGEZALanonymous_6  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bgezal ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x1e:
			#  BLTZALanonymous_7  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bltzal ') + (regname(rs))) + ((', ') + (hexify(target))));
		elif ((inst) >> (0x10)) & (0x1f) == 0x1f:
			#  BGEZALanonymous_7  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bgezal ') + (regname(rs))) + ((', ') + (hexify(target))));
		
	elif (inst) >> (0x1a) == 0x2:
		#  J  
		imm = (inst) & (0x3ffffff);
		target = ((((pc) + (0x4)) & (0xf0000000)) >> (0x0)) + (zeroext(0x1c, ((imm) << (0x2)) >> (0x0)));
		return(('j ') + (hexify(target)));
	elif (inst) >> (0x1a) == 0x3:
		#  JAL  
		imm = (inst) & (0x3ffffff);
		target = ((((pc) + (0x4)) & (0xf0000000)) >> (0x0)) + (zeroext(0x1c, ((imm) << (0x2)) >> (0x0)));
		return(('jal ') + (hexify(target)));
	elif (inst) >> (0x1a) == 0x4:
		#  BEQ  
		rs = ((inst) >> (0x15)) & (0x1f);
		rt = ((inst) >> (0x10)) & (0x1f);
		imm = (inst) & (0xffff);
		target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
		
		return((('beq ') + (regname(rs))) + (((', ') + (regname(rt))) + ((', ') + (hexify(target)))));
	elif (inst) >> (0x1a) == 0x5:
		#  BNE  
		rs = ((inst) >> (0x15)) & (0x1f);
		rt = ((inst) >> (0x10)) & (0x1f);
		imm = (inst) & (0xffff);
		target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
		
		return((('bne ') + (regname(rs))) + (((', ') + (regname(rt))) + ((', ') + (hexify(target)))));
	elif (inst) >> (0x1a) == 0x6:
		if ((inst) >> (0x10)) & (0x1f) == 0x0:
			#  BLEZ  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('blez ') + (regname(rs))) + ((', ') + (hexify(target))));
		
	elif (inst) >> (0x1a) == 0x7:
		if ((inst) >> (0x10)) & (0x1f) == 0x0:
			#  BGTZ  
			rs = ((inst) >> (0x15)) & (0x1f);
			imm = (inst) & (0xffff);
			target = ((pc) + (0x4)) + (((signext(0x10, imm)) << (0x2)) >> (0x0));
			
			return((('bgtz ') + (regname(rs))) + ((', ') + (hexify(target))));
		
	elif (inst) >> (0x1a) == 0x8:
		#  ADDI  
		rs = ((inst) >> (0x15)) & (0x1f);
		rt = ((inst) >> (0x10)) & (0x1f);
		imm = (inst) & (0xffff);
		eimm = signext(0x10, imm);
		return((('addi ') + (regname(rt))) + (((', ') + (regname(rs))) + ((', ') + (hexify(eimm)))));
	elif (inst) >> (0x1a) == 0x9:
		#  ADDIU  
		rs = ((inst) >> (0x15)) & (0x1f);
		rt = ((inst) >> (0x10)) & (0x1f);
		imm = (inst) & (0xffff);
		eimm = signext(0x10, imm);
		return((('addiu ') + (regname(rt))) + (((', ') + (regname(rs))) + ((', ') + (hexify(eimm)))));
	elif (inst) >> (0x1a) == 0xa:
		#  SLTI  
		rs = ((inst) >> (0x15)) & (0x1f);
		rt = ((inst) >> (0x10)) & (0x1f);
		imm = (inst) & (0xffff);
		eimm = signext(0x10, imm);
		return((('slti ') + (regname(rt))) + (((', ') + (regname(rs))) + ((', ') + (hexify(eimm)))));
	elif (inst) >> (0x1a) == 0xb:
		#  SLTIU  
		rs = ((inst) >> (0x15)) & (0x1f);
		rt = ((inst) >> (0x10)) & (0x1f);
		imm = (inst) & (0xffff);
		eimm = signext(0x10, imm);
		return((('sltiu ') + (regname(rt))) + (((', ') + (regname(rs))) + ((', ') + (hexify(eimm)))));
	elif (inst) >> (0x1a) == 0xc:
		#  ANDI  
		rs = ((inst) >> (0x15)) & (0x1f);
		rt = ((inst) >> (0x10)) & (0x1f);
		imm = (inst) & (0xffff);
		eimm = zeroext(0x10, imm);
		return((('andi ') + (regname(rt))) + (((', ') + (regname(rs))) + ((', ') + (hexify(eimm)))));
	elif (inst) >> (0x1a) == 0xd:
		#  ORI  
		rs = ((inst) >> (0x15)) & (0x1f);
		rt = ((inst) >> (0x10)) & (0x1f);
		imm = (inst) & (0xffff);
		eimm = zeroext(0x10, imm);
		return((('ori ') + (regname(rt))) + (((', ') + (regname(rs))) + ((', ') + (hexify(eimm)))));
	elif (inst) >> (0x1a) == 0xe:
		#  XORI  
		rs = ((inst) >> (0x15)) & (0x1f);
		rt = ((inst) >> (0x10)) & (0x1f);
		imm = (inst) & (0xffff);
		eimm = zeroext(0x10, imm);
		return((('xori ') + (regname(rt))) + (((', ') + (regname(rs))) + ((', ') + (hexify(eimm)))));
	elif (inst) >> (0x1a) == 0xf:
		#  LUI  
		rt = ((inst) >> (0x10)) & (0x1f);
		imm = (inst) & (0xffff);
		return((('lui ') + (regname(rt))) + ((', ') + (hexify(imm))));
	elif (inst) >> (0x1a) == 0x10:
		if ((inst) >> (0x15)) & (0x1f) == 0x0:
			#  MFCzanonymous_8  
			cop = ((inst) >> (0x1a)) & (0x3);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('mfc') + (hexify(cop))) + (((' ') + (regname(rt))) + ((', ') + (hexify(rd)))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x2:
			#  CFCzanonymous_8  
			cop = ((inst) >> (0x1a)) & (0x3);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('cfc') + (hexify(cop))) + (((' ') + (regname(rt))) + ((', ') + (hexify(rd)))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x4:
			#  MTCzanonymous_8  
			cop = ((inst) >> (0x1a)) & (0x3);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('mtc') + (hexify(cop))) + (((' ') + (regname(rt))) + ((', ') + (hexify(rd)))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x6:
			#  CTCzanonymous_8  
			cop = ((inst) >> (0x1a)) & (0x3);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('ctc') + (hexify(cop))) + (((' ') + (regname(rt))) + ((', ') + (hexify(rd)))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x10:
			#  COPzanonymous_12anonymous_8  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x11:
			#  COPzanonymous_13anonymous_8  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x12:
			#  COPzanonymous_14anonymous_8  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x13:
			#  COPzanonymous_15anonymous_8  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x14:
			#  COPzanonymous_16anonymous_8  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x15:
			#  COPzanonymous_17anonymous_8  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x16:
			#  COPzanonymous_18anonymous_8  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x17:
			#  COPzanonymous_19anonymous_8  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x18:
			#  COPzanonymous_20anonymous_8  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x19:
			#  COPzanonymous_21anonymous_8  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x1a:
			#  COPzanonymous_22anonymous_8  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x1b:
			#  COPzanonymous_23anonymous_8  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x1c:
			#  COPzanonymous_24anonymous_8  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x1d:
			#  COPzanonymous_25anonymous_8  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x1e:
			#  COPzanonymous_26anonymous_8  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x1f:
			#  COPzanonymous_27anonymous_8  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		
	elif (inst) >> (0x1a) == 0x11:
		if ((inst) >> (0x15)) & (0x1f) == 0x0:
			#  MFCzanonymous_9  
			cop = ((inst) >> (0x1a)) & (0x3);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('mfc') + (hexify(cop))) + (((' ') + (regname(rt))) + ((', ') + (hexify(rd)))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x2:
			#  CFCzanonymous_9  
			cop = ((inst) >> (0x1a)) & (0x3);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('cfc') + (hexify(cop))) + (((' ') + (regname(rt))) + ((', ') + (hexify(rd)))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x4:
			#  MTCzanonymous_9  
			cop = ((inst) >> (0x1a)) & (0x3);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('mtc') + (hexify(cop))) + (((' ') + (regname(rt))) + ((', ') + (hexify(rd)))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x6:
			#  CTCzanonymous_9  
			cop = ((inst) >> (0x1a)) & (0x3);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('ctc') + (hexify(cop))) + (((' ') + (regname(rt))) + ((', ') + (hexify(rd)))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x10:
			#  COPzanonymous_12anonymous_9  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x11:
			#  COPzanonymous_13anonymous_9  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x12:
			#  COPzanonymous_14anonymous_9  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x13:
			#  COPzanonymous_15anonymous_9  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x14:
			#  COPzanonymous_16anonymous_9  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x15:
			#  COPzanonymous_17anonymous_9  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x16:
			#  COPzanonymous_18anonymous_9  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x17:
			#  COPzanonymous_19anonymous_9  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x18:
			#  COPzanonymous_20anonymous_9  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x19:
			#  COPzanonymous_21anonymous_9  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x1a:
			#  COPzanonymous_22anonymous_9  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x1b:
			#  COPzanonymous_23anonymous_9  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x1c:
			#  COPzanonymous_24anonymous_9  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x1d:
			#  COPzanonymous_25anonymous_9  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x1e:
			#  COPzanonymous_26anonymous_9  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x1f:
			#  COPzanonymous_27anonymous_9  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		
	elif (inst) >> (0x1a) == 0x12:
		if ((inst) >> (0x15)) & (0x1f) == 0x0:
			#  MFCzanonymous_10  
			cop = ((inst) >> (0x1a)) & (0x3);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('mfc') + (hexify(cop))) + (((' ') + (regname(rt))) + ((', ') + (hexify(rd)))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x2:
			#  CFCzanonymous_10  
			cop = ((inst) >> (0x1a)) & (0x3);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('cfc') + (hexify(cop))) + (((' ') + (regname(rt))) + ((', ') + (hexify(rd)))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x4:
			#  MTCzanonymous_10  
			cop = ((inst) >> (0x1a)) & (0x3);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('mtc') + (hexify(cop))) + (((' ') + (regname(rt))) + ((', ') + (hexify(rd)))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x6:
			#  CTCzanonymous_10  
			cop = ((inst) >> (0x1a)) & (0x3);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('ctc') + (hexify(cop))) + (((' ') + (regname(rt))) + ((', ') + (hexify(rd)))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x10:
			#  COPzanonymous_12anonymous_10  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x11:
			#  COPzanonymous_13anonymous_10  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x12:
			#  COPzanonymous_14anonymous_10  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x13:
			#  COPzanonymous_15anonymous_10  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x14:
			#  COPzanonymous_16anonymous_10  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x15:
			#  COPzanonymous_17anonymous_10  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x16:
			#  COPzanonymous_18anonymous_10  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x17:
			#  COPzanonymous_19anonymous_10  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x18:
			#  COPzanonymous_20anonymous_10  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x19:
			#  COPzanonymous_21anonymous_10  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x1a:
			#  COPzanonymous_22anonymous_10  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x1b:
			#  COPzanonymous_23anonymous_10  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x1c:
			#  COPzanonymous_24anonymous_10  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x1d:
			#  COPzanonymous_25anonymous_10  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x1e:
			#  COPzanonymous_26anonymous_10  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x1f:
			#  COPzanonymous_27anonymous_10  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		
	elif (inst) >> (0x1a) == 0x13:
		if ((inst) >> (0x15)) & (0x1f) == 0x0:
			#  MFCzanonymous_11  
			cop = ((inst) >> (0x1a)) & (0x3);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('mfc') + (hexify(cop))) + (((' ') + (regname(rt))) + ((', ') + (hexify(rd)))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x2:
			#  CFCzanonymous_11  
			cop = ((inst) >> (0x1a)) & (0x3);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('cfc') + (hexify(cop))) + (((' ') + (regname(rt))) + ((', ') + (hexify(rd)))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x4:
			#  MTCzanonymous_11  
			cop = ((inst) >> (0x1a)) & (0x3);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('mtc') + (hexify(cop))) + (((' ') + (regname(rt))) + ((', ') + (hexify(rd)))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x6:
			#  CTCzanonymous_11  
			cop = ((inst) >> (0x1a)) & (0x3);
			rt = ((inst) >> (0x10)) & (0x1f);
			rd = ((inst) >> (0xb)) & (0x1f);
			return((('ctc') + (hexify(cop))) + (((' ') + (regname(rt))) + ((', ') + (hexify(rd)))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x10:
			#  COPzanonymous_12anonymous_11  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x11:
			#  COPzanonymous_13anonymous_11  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x12:
			#  COPzanonymous_14anonymous_11  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x13:
			#  COPzanonymous_15anonymous_11  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x14:
			#  COPzanonymous_16anonymous_11  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x15:
			#  COPzanonymous_17anonymous_11  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x16:
			#  COPzanonymous_18anonymous_11  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x17:
			#  COPzanonymous_19anonymous_11  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x18:
			#  COPzanonymous_20anonymous_11  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x19:
			#  COPzanonymous_21anonymous_11  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x1a:
			#  COPzanonymous_22anonymous_11  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x1b:
			#  COPzanonymous_23anonymous_11  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x1c:
			#  COPzanonymous_24anonymous_11  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x1d:
			#  COPzanonymous_25anonymous_11  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x1e:
			#  COPzanonymous_26anonymous_11  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		elif ((inst) >> (0x15)) & (0x1f) == 0x1f:
			#  COPzanonymous_27anonymous_11  
			cop = ((inst) >> (0x1a)) & (0x3);
			cofun = (inst) & (0x1ffffff);
			return((('cop') + (hexify(cop))) + ((' ') + (hexify(cofun))));
		
	elif (inst) >> (0x1a) == 0x20:
		#  LB  
		rs = ((inst) >> (0x15)) & (0x1f);
		rt = ((inst) >> (0x10)) & (0x1f);
		imm = (inst) & (0xffff);
		offset = signext(0x10, imm);
		return((('lb ') + (regname(rt))) + (((', ') + (hexify(offset))) + ((('(') + (regname(rs))) + (')'))));
	elif (inst) >> (0x1a) == 0x21:
		#  LH  
		rs = ((inst) >> (0x15)) & (0x1f);
		rt = ((inst) >> (0x10)) & (0x1f);
		imm = (inst) & (0xffff);
		offset = signext(0x10, imm);
		addr = (gpr(rs)) + (offset);
		return((('lh ') + (regname(rt))) + (((', ') + (hexify(offset))) + ((('(') + (regname(rs))) + (')'))));
	elif (inst) >> (0x1a) == 0x22:
		#  LWL  
		rs = ((inst) >> (0x15)) & (0x1f);
		rt = ((inst) >> (0x10)) & (0x1f);
		imm = (inst) & (0xffff);
		simm = signext(0x10, imm);
		offset = (gpr(rs)) + (simm);
		bottom = ((offset) & (0x3)) >> (0x0);
		moffset = ((offset) & (0xfffffffc)) >> (0x0);
		
		return((('lwl ') + (regname(rt))) + (((', ') + (hexify(offset))) + ((('(') + (regname(rs))) + (')'))));
	elif (inst) >> (0x1a) == 0x23:
		#  LW  
		rs = ((inst) >> (0x15)) & (0x1f);
		rt = ((inst) >> (0x10)) & (0x1f);
		imm = (inst) & (0xffff);
		offset = signext(0x10, imm);
		addr = (gpr(rs)) + (offset);
		return((('lw ') + (regname(rt))) + (((', ') + (hexify(offset))) + ((('(') + (regname(rs))) + (')'))));
	elif (inst) >> (0x1a) == 0x24:
		#  LBU  
		rs = ((inst) >> (0x15)) & (0x1f);
		rt = ((inst) >> (0x10)) & (0x1f);
		imm = (inst) & (0xffff);
		offset = signext(0x10, imm);
		return((('lbu ') + (regname(rt))) + (((', ') + (hexify(offset))) + ((('(') + (regname(rs))) + (')'))));
	elif (inst) >> (0x1a) == 0x25:
		#  LHU  
		rs = ((inst) >> (0x15)) & (0x1f);
		rt = ((inst) >> (0x10)) & (0x1f);
		imm = (inst) & (0xffff);
		offset = signext(0x10, imm);
		addr = (gpr(rs)) + (offset);
		return((('lhu ') + (regname(rt))) + (((', ') + (hexify(offset))) + ((('(') + (regname(rs))) + (')'))));
	elif (inst) >> (0x1a) == 0x26:
		#  LWR  
		rs = ((inst) >> (0x15)) & (0x1f);
		rt = ((inst) >> (0x10)) & (0x1f);
		imm = (inst) & (0xffff);
		simm = signext(0x10, imm);
		offset = (gpr(rs)) + (simm);
		bottom = ((offset) & (0x3)) >> (0x0);
		
		return((('lwr ') + (regname(rt))) + (((', ') + (hexify(offset))) + ((('(') + (regname(rs))) + (')'))));
	elif (inst) >> (0x1a) == 0x28:
		#  SB  
		rs = ((inst) >> (0x15)) & (0x1f);
		rt = ((inst) >> (0x10)) & (0x1f);
		imm = (inst) & (0xffff);
		offset = signext(0x10, imm);
		return((('sb ') + (regname(rt))) + (((', ') + (hexify(offset))) + ((('(') + (regname(rs))) + (')'))));
	elif (inst) >> (0x1a) == 0x29:
		#  SH  
		rs = ((inst) >> (0x15)) & (0x1f);
		rt = ((inst) >> (0x10)) & (0x1f);
		imm = (inst) & (0xffff);
		offset = signext(0x10, imm);
		addr = (gpr(rs)) + (offset);
		return((('sh ') + (regname(rt))) + (((', ') + (hexify(offset))) + ((('(') + (regname(rs))) + (')'))));
	elif (inst) >> (0x1a) == 0x2a:
		#  SWL  
		rs = ((inst) >> (0x15)) & (0x1f);
		rt = ((inst) >> (0x10)) & (0x1f);
		imm = (inst) & (0xffff);
		simm = signext(0x10, imm);
		offset = (gpr(rs)) + (simm);
		bottom = ((offset) & (0x3)) >> (0x0);
		moffset = ((offset) & (0xfffffffc)) >> (0x0);
		
		return((('swl ') + (regname(rt))) + (((', ') + (hexify(offset))) + ((('(') + (regname(rs))) + (')'))));
	elif (inst) >> (0x1a) == 0x2b:
		#  SW  
		rs = ((inst) >> (0x15)) & (0x1f);
		rt = ((inst) >> (0x10)) & (0x1f);
		imm = (inst) & (0xffff);
		offset = signext(0x10, imm);
		addr = (gpr(rs)) + (offset);
		return((('sw ') + (regname(rt))) + (((', ') + (hexify(offset))) + ((('(') + (regname(rs))) + (')'))));
	elif (inst) >> (0x1a) == 0x2e:
		#  SWR  
		rs = ((inst) >> (0x15)) & (0x1f);
		rt = ((inst) >> (0x10)) & (0x1f);
		imm = (inst) & (0xffff);
		simm = signext(0x10, imm);
		offset = (gpr(rs)) + (simm);
		bottom = ((offset) & (0x3)) >> (0x0);
		
		return((('swr ') + (regname(rt))) + (((', ') + (hexify(offset))) + ((('(') + (regname(rs))) + (')'))));
	elif (inst) >> (0x1a) == 0x32:
		#  LWC2  
		rs = ((inst) >> (0x15)) & (0x1f);
		rt = ((inst) >> (0x10)) & (0x1f);
		imm = (inst) & (0xffff);
		offset = signext(0x10, imm);
		addr = (gpr(rs)) + (offset);
		return((('lwc2 ') + (regname(rt))) + (((', ') + (hexify(offset))) + ((('(') + (regname(rs))) + (')'))));
	elif (inst) >> (0x1a) == 0x3a:
		#  SWC2  
		rs = ((inst) >> (0x15)) & (0x1f);
		rt = ((inst) >> (0x10)) & (0x1f);
		imm = (inst) & (0xffff);
		offset = signext(0x10, imm);
		addr = (gpr(rs)) + (offset);
		return((('swc2 ') + (regname(rt))) + (((', ') + (hexify(offset))) + ((('(') + (regname(rs))) + (')'))));
	
	return 'Unknown instruction. Op=0b%06b (Funct=0b Cofunct=0b)';

